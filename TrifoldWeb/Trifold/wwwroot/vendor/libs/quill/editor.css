.ql-container {
  position: relative;
  margin: 0;
  display: block; }
  .ql-container.ql-disabled .ql-tooltip {
    visibility: hidden; }
  .ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {
    pointer-events: none; }

.ql-clipboard {
  position: absolute;
  top: 50%;
  left: -6250rem;
  overflow-y: hidden;
  height: .0625rem; }
  [dir=rtl] .ql-clipboard {
    right: -6250rem;
    left: auto; }

.ql-editor {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  height: 100%;
  outline: none;
  overflow-y: auto;
  -o-tab-size: 4;
     tab-size: 4;
  -moz-tab-size: 4;
  white-space: pre-wrap;
  word-wrap: break-word;
  display: block; }
  .ql-editor > * {
    cursor: text; }
  .ql-editor.ql-blank::before {
    content: attr(data-placeholder);
    position: absolute;
    right: 0;
    left: 0;
    font-style: italic;
    pointer-events: none; }

.ql-snow,
.ql-bubble {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }
  .ql-snow *,
  .ql-bubble * {
    -webkit-box-sizing: border-box;
            box-sizing: border-box; }
  .ql-snow .ql-hidden,
  .ql-bubble .ql-hidden {
    display: none !important; }
  .ql-snow .ql-out-bottom,
  .ql-snow .ql-out-top,
  .ql-bubble .ql-out-bottom,
  .ql-bubble .ql-out-top {
    visibility: hidden; }
  .ql-snow .ql-empty,
  .ql-bubble .ql-empty {
    fill: none; }
  .ql-snow .ql-even,
  .ql-bubble .ql-even {
    fill-rule: evenodd; }
  .ql-snow .ql-thin,
  .ql-snow .ql-stroke.ql-thin,
  .ql-bubble .ql-thin,
  .ql-bubble .ql-stroke.ql-thin {
    stroke-width: 1; }
  .ql-snow .ql-transparent,
  .ql-bubble .ql-transparent {
    opacity: .4; }
  .ql-snow .ql-direction svg:last-child,
  .ql-bubble .ql-direction svg:last-child {
    display: none; }
  .ql-snow .ql-direction.ql-active svg:last-child,
  .ql-bubble .ql-direction.ql-active svg:last-child {
    display: inline; }
  .ql-snow .ql-direction.ql-active svg:first-child,
  .ql-bubble .ql-direction.ql-active svg:first-child {
    display: none; }
  .ql-snow .ql-editor a,
  .ql-bubble .ql-editor a {
    text-decoration: underline; }
  .ql-snow.ql-toolbar,
  .ql-snow .ql-toolbar,
  .ql-bubble.ql-toolbar,
  .ql-bubble .ql-toolbar {
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
    padding: .5rem; }
    .ql-snow.ql-toolbar::after,
    .ql-snow .ql-toolbar::after,
    .ql-bubble.ql-toolbar::after,
    .ql-bubble .ql-toolbar::after {
      content: '';
      display: table;
      clear: both; }
    .ql-snow.ql-toolbar button,
    .ql-snow .ql-toolbar button,
    .ql-bubble.ql-toolbar button,
    .ql-bubble .ql-toolbar button {
      display: inline-block;
      float: left;
      padding: .1875rem .3125rem;
      width: 1.75rem;
      height: 1.5rem;
      border: none;
      background: none;
      cursor: pointer; }
      .ql-snow.ql-toolbar button:active:hover,
      .ql-snow .ql-toolbar button:active:hover,
      .ql-bubble.ql-toolbar button:active:hover,
      .ql-bubble .ql-toolbar button:active:hover {
        outline: none; }
      [dir=rtl] .ql-snow.ql-toolbar button, [dir=rtl]
      .ql-snow .ql-toolbar button, [dir=rtl]
      .ql-bubble.ql-toolbar button, [dir=rtl]
      .ql-bubble .ql-toolbar button {
        float: right; }
      .ql-snow.ql-toolbar button svg,
      .ql-snow .ql-toolbar button svg,
      .ql-bubble.ql-toolbar button svg,
      .ql-bubble .ql-toolbar button svg {
        float: left;
        height: 100%; }
        [dir=rtl] .ql-snow.ql-toolbar button svg, [dir=rtl]
        .ql-snow .ql-toolbar button svg, [dir=rtl]
        .ql-bubble.ql-toolbar button svg, [dir=rtl]
        .ql-bubble .ql-toolbar button svg {
          float: right; }
    .ql-snow.ql-toolbar input.ql-image[type=file],
    .ql-snow .ql-toolbar input.ql-image[type=file],
    .ql-bubble.ql-toolbar input.ql-image[type=file],
    .ql-bubble .ql-toolbar input.ql-image[type=file] {
      display: none; }
  .ql-snow .ql-tooltip,
  .ql-bubble .ql-tooltip {
    position: absolute;
    -webkit-transform: translateY(0.625rem);
            transform: translateY(0.625rem); }
    .ql-snow .ql-tooltip.ql-flip,
    .ql-bubble .ql-tooltip.ql-flip {
      -webkit-transform: translateY(-0.625rem);
              transform: translateY(-0.625rem); }
    .ql-snow .ql-tooltip a,
    .ql-bubble .ql-tooltip a {
      text-decoration: none;
      cursor: pointer; }
  .ql-snow .ql-formats,
  .ql-bubble .ql-formats {
    display: inline-block;
    margin-right: .9375rem;
    vertical-align: middle; }
    [dir=rtl] .ql-snow .ql-formats, [dir=rtl]
    .ql-bubble .ql-formats {
      margin-right: 0;
      margin-left: .9375rem; }
    .ql-snow .ql-formats::after,
    .ql-bubble .ql-formats::after {
      content: '';
      display: table;
      clear: both; }
  .ql-snow .ql-picker,
  .ql-bubble .ql-picker {
    position: relative;
    display: inline-block;
    float: left;
    height: 1.5rem;
    vertical-align: middle; }
    [dir=rtl] .ql-snow .ql-picker, [dir=rtl]
    .ql-bubble .ql-picker {
      float: right; }
    .ql-snow .ql-picker.ql-expanded .ql-picker-options,
    .ql-bubble .ql-picker.ql-expanded .ql-picker-options {
      top: 100%;
      z-index: 1;
      display: block;
      margin-top: -.0625rem; }
    .ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before, .ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before, .ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,
    .ql-bubble .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {
      content: attr(data-label); }
    .ql-snow .ql-picker.ql-header,
    .ql-bubble .ql-picker.ql-header {
      width: 6.125rem; }
      .ql-snow .ql-picker.ql-header .ql-picker-label::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item::before {
        content: 'Normal'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="1"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="1"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {
        content: 'Heading 1'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="2"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="2"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {
        content: 'Heading 2'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="3"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="3"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {
        content: 'Heading 3'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="4"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="4"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {
        content: 'Heading 4'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="5"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="5"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {
        content: 'Heading 5'; }
      .ql-snow .ql-picker.ql-header .ql-picker-label[data-value="6"]::before,
      .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-label[data-value="6"]::before,
      .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {
        content: 'Heading 6'; }
    .ql-snow .ql-picker.ql-font,
    .ql-bubble .ql-picker.ql-font {
      width: 6.75rem; }
      .ql-snow .ql-picker.ql-font .ql-picker-label::before,
      .ql-snow .ql-picker.ql-font .ql-picker-item::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-label::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-item::before {
        content: 'Sans Serif'; }
      .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,
      .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {
        content: 'Serif'; }
      .ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,
      .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,
      .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {
        content: 'Monospace'; }
    .ql-snow .ql-picker.ql-size,
    .ql-bubble .ql-picker.ql-size {
      width: 6.125rem; }
      .ql-snow .ql-picker.ql-size .ql-picker-label::before,
      .ql-snow .ql-picker.ql-size .ql-picker-item::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-label::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-item::before {
        content: 'Normal'; }
      .ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,
      .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=small]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before {
        content: 'Small'; }
      .ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,
      .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=large]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before {
        content: 'Large'; }
      .ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,
      .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,
      .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {
        content: 'Huge'; }
    .ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg,
    .ql-bubble .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {
      position: absolute;
      top: 50%;
      right: 0;
      margin-top: -.5625rem;
      width: 1.125rem; }
      [dir=rtl] .ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg, [dir=rtl]
      .ql-bubble .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {
        right: auto;
        left: 0; }
  .ql-snow .ql-picker-label,
  .ql-bubble .ql-picker-label {
    position: relative;
    display: inline-block;
    padding-right: .125rem;
    padding-left: .5rem;
    width: 100%;
    height: 100%;
    border: .0625rem solid transparent;
    cursor: pointer; }
    .ql-snow .ql-picker-label::before,
    .ql-bubble .ql-picker-label::before {
      display: inline-block;
      line-height: 1.375rem; }
  .ql-snow .ql-picker-options,
  .ql-bubble .ql-picker-options {
    position: absolute;
    display: none;
    padding: .25rem .5rem;
    min-width: 100%;
    white-space: nowrap; }
    .ql-snow .ql-picker-options .ql-picker-item,
    .ql-bubble .ql-picker-options .ql-picker-item {
      display: block;
      padding-top: .3125rem;
      padding-bottom: .3125rem;
      cursor: pointer; }
  .ql-snow .ql-color-picker,
  .ql-snow .ql-icon-picker,
  .ql-bubble .ql-color-picker,
  .ql-bubble .ql-icon-picker {
    width: 1.75rem; }
    .ql-snow .ql-color-picker .ql-picker-label,
    .ql-snow .ql-icon-picker .ql-picker-label,
    .ql-bubble .ql-color-picker .ql-picker-label,
    .ql-bubble .ql-icon-picker .ql-picker-label {
      padding: .125rem .25rem; }
  .ql-snow .ql-icon-picker .ql-picker-options,
  .ql-bubble .ql-icon-picker .ql-picker-options {
    padding: .25rem 0; }
  .ql-snow .ql-icon-picker .ql-picker-item,
  .ql-bubble .ql-icon-picker .ql-picker-item {
    padding: .125rem .25rem;
    width: 1.5rem;
    height: 1.5rem; }
  .ql-snow .ql-color-picker .ql-picker-options,
  .ql-bubble .ql-color-picker .ql-picker-options {
    padding: .1875rem .3125rem;
    width: 9.5rem; }
  .ql-snow .ql-color-picker .ql-picker-item,
  .ql-bubble .ql-color-picker .ql-picker-item {
    float: left;
    margin: .125rem;
    padding: 0;
    width: 1rem;
    height: 1rem;
    border: .0625rem solid transparent; }
    [dir=rtl] .ql-snow .ql-color-picker .ql-picker-item, [dir=rtl]
    .ql-bubble .ql-color-picker .ql-picker-item {
      float: right; }
  .ql-snow .ql-color-picker.ql-background .ql-picker-item,
  .ql-bubble .ql-color-picker.ql-background .ql-picker-item {
    background-color: #fff; }
  .ql-snow .ql-color-picker.ql-color .ql-picker-item,
  .ql-bubble .ql-color-picker.ql-color .ql-picker-item {
    background-color: #000; }
  [dir=rtl] .ql-snow .ql-italic svg,
  [dir=rtl] .ql-snow .ql-list svg,
  [dir=rtl] .ql-snow .ql-indent svg,
  [dir=rtl] .ql-snow .ql-direction svg,
  [dir=rtl] .ql-snow .ql-align svg,
  [dir=rtl] .ql-snow .ql-link svg,
  [dir=rtl] .ql-snow .ql-image svg,
  [dir=rtl] .ql-snow .ql-clean svg, [dir=rtl]
  .ql-bubble .ql-italic svg,
  [dir=rtl]
  .ql-bubble .ql-list svg,
  [dir=rtl]
  .ql-bubble .ql-indent svg,
  [dir=rtl]
  .ql-bubble .ql-direction svg,
  [dir=rtl]
  .ql-bubble .ql-align svg,
  [dir=rtl]
  .ql-bubble .ql-link svg,
  [dir=rtl]
  .ql-bubble .ql-image svg,
  [dir=rtl]
  .ql-bubble .ql-clean svg {
    -webkit-transform: scaleX(-1);
            transform: scaleX(-1); }

.ql-snow.ql-toolbar,
.ql-snow .ql-toolbar {
  background: #fff;
  background-clip: padding-box; }

.ql-snow .ql-editor {
  min-height: 15rem;
  background: #fff; }

.ql-snow .ql-picker.ql-expanded .ql-picker-label {
  z-index: 2;
  color: #ccc !important; }
  .ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {
    fill: #ccc !important; }
  .ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {
    stroke: #ccc !important; }

.ql-snow .ql-stroke {
  fill: none;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: 2; }

.ql-snow .ql-stroke-miter {
  fill: none;
  stroke-miterlimit: 10;
  stroke-width: 2; }

.ql-snow .ql-picker-label {
  border: .0625rem solid transparent; }

.ql-snow .ql-picker-options {
  border: .0625rem solid transparent;
  background-color: #fff;
  background-clip: padding-box; }

.ql-snow .ql-color-picker .ql-picker-item.ql-selected,
.ql-snow .ql-color-picker .ql-picker-item:hover {
  border-color: #000; }

.ql-snow .ql-tooltip {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding: .3125rem .75rem;
  background-color: #fff;
  background-clip: padding-box;
  white-space: nowrap; }
  .ql-snow .ql-tooltip::before {
    content: "Visit URL:";
    margin-right: .5rem;
    line-height: 1.625rem; }
    [dir=rtl] .ql-snow .ql-tooltip::before {
      margin-right: 0;
      margin-left: .5rem; }
  .ql-snow .ql-tooltip input[type=text] {
    display: none;
    margin: 0;
    padding: .1875rem .3125rem;
    width: 10.625rem;
    height: 1.625rem;
    font-size: .8125rem; }
  .ql-snow .ql-tooltip a.ql-preview {
    display: inline-block;
    overflow-x: hidden;
    max-width: 12.5rem;
    vertical-align: top;
    text-overflow: ellipsis; }
  .ql-snow .ql-tooltip a.ql-action::after {
    content: 'Edit';
    margin-left: 1rem;
    padding-right: .5rem;
    border-right: .0625rem solid #ccc; }
    [dir=rtl] .ql-snow .ql-tooltip a.ql-action::after {
      margin-right: 1rem;
      margin-left: 0;
      padding-right: 0;
      padding-left: .5rem;
      border-right: 0;
      border-left: .0625rem solid #ccc; }
  .ql-snow .ql-tooltip a.ql-remove::before {
    content: 'Remove';
    margin-left: .5rem; }
    [dir=rtl] .ql-snow .ql-tooltip a.ql-remove::before {
      margin-right: .5rem;
      margin-left: 0; }
  .ql-snow .ql-tooltip a {
    line-height: 1.625rem; }
  .ql-snow .ql-tooltip.ql-editing a.ql-preview,
  .ql-snow .ql-tooltip.ql-editing a.ql-remove {
    display: none; }
  .ql-snow .ql-tooltip.ql-editing input[type=text] {
    display: inline-block; }
  .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
    content: 'Save';
    padding-right: 0;
    border-right: 0; }
    [dir=rtl] .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
      padding-left: 0;
      border-left: 0; }
  .ql-snow .ql-tooltip[data-mode=link]::before {
    content: "Enter link:"; }
  .ql-snow .ql-tooltip[data-mode=formula]::before {
    content: "Enter formula:"; }
  .ql-snow .ql-tooltip[data-mode=video]::before {
    content: "Enter video:"; }

.ql-bubble.ql-toolbar button:hover,
.ql-bubble.ql-toolbar button:focus,
.ql-bubble.ql-toolbar button.ql-active,
.ql-bubble.ql-toolbar .ql-picker-label:hover,
.ql-bubble.ql-toolbar .ql-picker-label.ql-active,
.ql-bubble.ql-toolbar .ql-picker-item:hover,
.ql-bubble.ql-toolbar .ql-picker-item.ql-selected,
.ql-bubble .ql-toolbar button:hover,
.ql-bubble .ql-toolbar button:focus,
.ql-bubble .ql-toolbar button.ql-active,
.ql-bubble .ql-toolbar .ql-picker-label:hover,
.ql-bubble .ql-toolbar .ql-picker-label.ql-active,
.ql-bubble .ql-toolbar .ql-picker-item:hover,
.ql-bubble .ql-toolbar .ql-picker-item.ql-selected {
  color: #fff; }

.ql-bubble.ql-toolbar button:hover .ql-fill,
.ql-bubble.ql-toolbar button:focus .ql-fill,
.ql-bubble.ql-toolbar button.ql-active .ql-fill,
.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-fill,
.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-fill,
.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-fill,
.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-fill,
.ql-bubble.ql-toolbar button:hover .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar button:focus .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar button.ql-active .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,
.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar button:hover .ql-fill,
.ql-bubble .ql-toolbar button:focus .ql-fill,
.ql-bubble .ql-toolbar button.ql-active .ql-fill,
.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-fill,
.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-fill,
.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-fill,
.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-fill,
.ql-bubble .ql-toolbar button:hover .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar button:focus .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar button.ql-active .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,
.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {
  fill: #fff; }

.ql-bubble.ql-toolbar button:hover .ql-stroke,
.ql-bubble.ql-toolbar button:focus .ql-stroke,
.ql-bubble.ql-toolbar button.ql-active .ql-stroke,
.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke,
.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke,
.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke,
.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,
.ql-bubble.ql-toolbar button:hover .ql-stroke-miter,
.ql-bubble.ql-toolbar button:focus .ql-stroke-miter,
.ql-bubble.ql-toolbar button.ql-active .ql-stroke-miter,
.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,
.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,
.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,
.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,
.ql-bubble .ql-toolbar button:hover .ql-stroke,
.ql-bubble .ql-toolbar button:focus .ql-stroke,
.ql-bubble .ql-toolbar button.ql-active .ql-stroke,
.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke,
.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke,
.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke,
.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,
.ql-bubble .ql-toolbar button:hover .ql-stroke-miter,
.ql-bubble .ql-toolbar button:focus .ql-stroke-miter,
.ql-bubble .ql-toolbar button.ql-active .ql-stroke-miter,
.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,
.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,
.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,
.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {
  stroke: #fff; }

@media (pointer: coarse) {
  .ql-bubble.ql-toolbar button:hover:not(.ql-active),
  .ql-bubble .ql-toolbar button:hover:not(.ql-active) {
    color: #ccc; }
  .ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-fill,
  .ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,
  .ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-fill,
  .ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {
    fill: #ccc; }
  .ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke,
  .ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,
  .ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke,
  .ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {
    stroke: #ccc; } }

.ql-bubble .ql-stroke {
  fill: none;
  stroke: #ccc;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: 2; }

.ql-bubble .ql-stroke-miter {
  fill: none;
  stroke: #ccc;
  stroke-miterlimit: 10;
  stroke-width: 2; }

.ql-bubble .ql-fill,
.ql-bubble .ql-stroke.ql-fill {
  fill: #ccc; }

.ql-bubble .ql-picker {
  color: #ccc; }
  .ql-bubble .ql-picker.ql-expanded .ql-picker-label {
    z-index: 2;
    color: #777; }
    .ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-fill {
      fill: #777; }
    .ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-stroke {
      stroke: #777; }

.ql-bubble .ql-picker-options {
  background-color: #444; }

.ql-bubble .ql-color-picker .ql-picker-label svg,
.ql-bubble .ql-icon-picker .ql-picker-label svg {
  right: .25rem; }
  [dir=rtl] .ql-bubble .ql-color-picker .ql-picker-label svg, [dir=rtl]
  .ql-bubble .ql-icon-picker .ql-picker-label svg {
    right: auto;
    left: .25rem; }

.ql-bubble .ql-color-picker .ql-color-picker svg {
  margin: .0625rem; }

.ql-bubble .ql-color-picker .ql-picker-item.ql-selected,
.ql-bubble .ql-color-picker .ql-picker-item:hover {
  border-color: #fff; }

.ql-bubble .ql-toolbar .ql-formats {
  margin: .5rem .75rem .5rem 0; }
  [dir=rtl] .ql-bubble .ql-toolbar .ql-formats {
    margin: .5rem 0 .5rem .75rem; }
  .ql-bubble .ql-toolbar .ql-formats:first-child {
    margin-left: .75rem; }
    [dir=rtl] .ql-bubble .ql-toolbar .ql-formats:first-child {
      margin-right: .75rem; }

.ql-bubble .ql-tooltip-arrow {
  content: " ";
  position: absolute;
  left: 50%;
  display: block;
  margin-left: -.375rem;
  border-right: .375rem solid transparent;
  border-left: .375rem solid transparent; }

.ql-bubble .ql-tooltip {
  background-color: #444;
  color: #fff; }
  .ql-bubble .ql-tooltip:not(.ql-flip) .ql-tooltip-arrow {
    top: -.375rem;
    border-bottom: .375rem solid #444; }
  .ql-bubble .ql-tooltip.ql-flip .ql-tooltip-arrow {
    bottom: -.375rem;
    border-top: .375rem solid #444; }
  .ql-bubble .ql-tooltip.ql-editing .ql-tooltip-editor {
    display: block; }
  .ql-bubble .ql-tooltip.ql-editing .ql-formats {
    visibility: hidden; }

.ql-bubble .ql-tooltip-editor {
  display: none; }
  .ql-bubble .ql-tooltip-editor input[type=text] {
    position: absolute;
    padding: .625rem 1.25rem;
    width: 100%;
    height: 100%;
    outline: none;
    border: none;
    background: transparent;
    color: #fff;
    font-size: .8125rem; }
  .ql-bubble .ql-tooltip-editor a {
    position: absolute;
    top: .625rem;
    right: 1.25rem; }
    [dir=rtl] .ql-bubble .ql-tooltip-editor a {
      right: auto;
      left: 1.25rem; }
    .ql-bubble .ql-tooltip-editor a::before {
      content: "\D7";
      color: #ccc;
      font-weight: bold;
      font-size: 1rem; }

.ql-bubble.ql-container:not(.ql-disabled) a {
  position: relative;
  white-space: nowrap; }
  .ql-bubble.ql-container:not(.ql-disabled) a::before, .ql-bubble.ql-container:not(.ql-disabled) a::after {
    position: absolute;
    left: 0;
    visibility: hidden;
    margin-left: 50%;
    -webkit-transition: visibility 0s ease 200ms;
    transition: visibility 0s ease 200ms;
    -webkit-transform: translate(-50%, -100%);
            transform: translate(-50%, -100%); }
  .ql-bubble.ql-container:not(.ql-disabled) a:hover::before, .ql-bubble.ql-container:not(.ql-disabled) a:hover::after {
    visibility: visible; }
  .ql-bubble.ql-container:not(.ql-disabled) a::before {
    content: attr(href);
    top: -.3125rem;
    z-index: 1;
    overflow: hidden;
    padding: .3125rem .9375rem;
    border-radius: .9375rem;
    background-color: #444;
    color: #fff;
    text-decoration: none;
    font-weight: normal;
    font-size: .75rem; }
  .ql-bubble.ql-container:not(.ql-disabled) a::after {
    content: " ";
    top: 0;
    width: 0;
    height: 0;
    border-top: .375rem solid #444;
    border-right: .375rem solid transparent;
    border-left: .375rem solid transparent; }

.default-style .ql-editor.ql-blank:before {
  color: #babbbc; }

.default-style .ql-snow.ql-toolbar .ql-picker-options,
.default-style .ql-snow .ql-toolbar .ql-picker-options,
.default-style .ql-bubble.ql-toolbar .ql-picker-options,
.default-style .ql-bubble .ql-toolbar .ql-picker-options {
  -webkit-box-shadow: 0 1px 6px rgba(0, 0, 0, 0.09);
          box-shadow: 0 1px 6px rgba(0, 0, 0, 0.09); }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {
  font-size: 2.25rem; }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {
  font-size: 1.813rem; }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {
  font-size: 1.563rem; }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {
  font-size: 1.313rem; }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {
  font-size: 1rem; }

.default-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before,
.default-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {
  font-size: 0.894rem; }

.default-style .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,
.default-style .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {
  font-family: Georgia, "Times New Roman", serif; }

.default-style .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,
.default-style .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {
  font-family: "SFMono-Regular", Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }

.default-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,
.default-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before {
  font-size: 0.75rem; }

.default-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,
.default-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before {
  font-size: 1rem; }

.default-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,
.default-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {
  font-size: 1.25rem; }

.default-style .ql-snow .ql-editor.ql-blank::before {
  padding: 0 1.125rem; }

.default-style .ql-snow.ql-container {
  border: 0.0625rem solid rgba(24, 28, 33, 0.06); }

.default-style .ql-snow .ql-editor {
  padding: 1.125rem; }

.default-style .ql-snow.ql-toolbar,
.default-style .ql-snow .ql-toolbar {
  border: 0.0625rem solid rgba(24, 28, 33, 0.06); }
  @media (pointer: coarse) {
    .default-style .ql-snow.ql-toolbar button:hover:not(.ql-active),
    .default-style .ql-snow .ql-toolbar button:hover:not(.ql-active) {
      color: #4E5155; }
    .default-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,
    .default-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,
    .default-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,
    .default-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {
      fill: #4E5155; }
    .default-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,
    .default-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,
    .default-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,
    .default-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {
      stroke: #4E5155; } }

.default-style .ql-snow.ql-toolbar + .ql-container.ql-snow {
  border-top: 0; }

.default-style .ql-snow .ql-stroke {
  stroke: #4E5155; }

.default-style .ql-snow .ql-stroke-miter {
  stroke: #4E5155; }

.default-style .ql-snow .ql-fill,
.default-style .ql-snow .ql-stroke.ql-fill {
  fill: #4E5155; }

.default-style .ql-snow .ql-picker {
  color: #4E5155; }
  .default-style .ql-snow .ql-picker.ql-expanded .ql-picker-label {
    border-color: rgba(24, 28, 33, 0.06); }
  .default-style .ql-snow .ql-picker.ql-expanded .ql-picker-options {
    border-color: rgba(24, 28, 33, 0.05); }

.default-style .ql-snow .ql-tooltip {
  border: 1px solid rgba(24, 28, 33, 0.05);
  -webkit-box-shadow: 0 1px 6px rgba(0, 0, 0, 0.09);
          box-shadow: 0 1px 6px rgba(0, 0, 0, 0.09);
  color: #4E5155; }
  .default-style .ql-snow .ql-tooltip input[type=text] {
    border: 0.0625rem solid rgba(24, 28, 33, 0.1); }

.default-style .ql-bubble .ql-tooltip {
  border-radius: 0.25rem;
  z-index: 1090; }

.material-style .ql-editor.ql-blank:before {
  color: #babbbc; }

.material-style .ql-snow.ql-toolbar .ql-picker-options,
.material-style .ql-snow .ql-toolbar .ql-picker-options,
.material-style .ql-bubble.ql-toolbar .ql-picker-options,
.material-style .ql-bubble .ql-toolbar .ql-picker-options {
  -webkit-box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.07), 0px 4px 5px 0px rgba(0, 0, 0, 0.05), 0px 1px 10px 0px rgba(0, 0, 0, 0.03);
          box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.07), 0px 4px 5px 0px rgba(0, 0, 0, 0.05), 0px 1px 10px 0px rgba(0, 0, 0, 0.03); }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {
  font-size: 2.25rem; }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {
  font-size: 1.813rem; }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {
  font-size: 1.563rem; }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {
  font-size: 1.313rem; }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {
  font-size: 1rem; }

.material-style .ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before,
.material-style .ql-bubble .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {
  font-size: 0.894rem; }

.material-style .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,
.material-style .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {
  font-family: Georgia, "Times New Roman", serif; }

.material-style .ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,
.material-style .ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {
  font-family: "SFMono-Regular", Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }

.material-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,
.material-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before {
  font-size: 0.75rem; }

.material-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,
.material-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before {
  font-size: 1rem; }

.material-style .ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,
.material-style .ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {
  font-size: 1.25rem; }

.material-style .ql-snow .ql-editor.ql-blank:before {
  padding: 0 1rem; }

.material-style .ql-snow.ql-container {
  border: 0.0625rem solid rgba(24, 28, 33, 0.06); }

.material-style .ql-snow .ql-editor {
  padding: 1rem; }

.material-style .ql-snow.ql-toolbar,
.material-style .ql-snow .ql-toolbar {
  border: 0.0625rem solid rgba(24, 28, 33, 0.06); }
  @media (pointer: coarse) {
    .material-style .ql-snow.ql-toolbar button:hover:not(.ql-active),
    .material-style .ql-snow .ql-toolbar button:hover:not(.ql-active) {
      color: #4E5155; }
    .material-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,
    .material-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,
    .material-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,
    .material-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {
      fill: #4E5155; }
    .material-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,
    .material-style .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,
    .material-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,
    .material-style .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {
      stroke: #4E5155; } }

.material-style .ql-snow.ql-toolbar + .ql-container.ql-snow {
  border-top: 0; }

.material-style .ql-snow .ql-stroke {
  stroke: #4E5155; }

.material-style .ql-snow .ql-stroke-miter {
  stroke: #4E5155; }

.material-style .ql-snow .ql-fill,
.material-style .ql-snow .ql-stroke.ql-fill {
  fill: #4E5155; }

.material-style .ql-snow .ql-picker {
  color: #4E5155; }
  .material-style .ql-snow .ql-picker.ql-expanded .ql-picker-label {
    border-color: rgba(24, 28, 33, 0.06); }
  .material-style .ql-snow .ql-picker.ql-expanded .ql-picker-options {
    border-color: rgba(24, 28, 33, 0.15); }

.material-style .ql-snow .ql-tooltip {
  border: 0px solid rgba(24, 28, 33, 0.15);
  -webkit-box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.07), 0px 4px 5px 0px rgba(0, 0, 0, 0.05), 0px 1px 10px 0px rgba(0, 0, 0, 0.03);
          box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.07), 0px 4px 5px 0px rgba(0, 0, 0, 0.05), 0px 1px 10px 0px rgba(0, 0, 0, 0.03);
  color: #4E5155; }
  .material-style .ql-snow .ql-tooltip input[type=text] {
    border: 0.0625rem solid rgba(24, 28, 33, 0.1); }

.material-style .ql-bubble .ql-tooltip {
  border-radius: 0.125rem;
  z-index: 1090; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
