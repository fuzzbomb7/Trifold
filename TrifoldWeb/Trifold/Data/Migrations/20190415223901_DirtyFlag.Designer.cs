// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trifold.Data;

namespace Trifold.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190415223901_DirtyFlag")]
    partial class DirtyFlag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Trifold.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EventPromoterId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UntappdAccessToken");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EventPromoterId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Trifold.Models.Apps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AndroidAppStoreUrl");

                    b.Property<string>("AppName");

                    b.Property<string>("ApplicationId");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsWhiteLabel");

                    b.Property<string>("PrimaryColor");

                    b.Property<string>("SplashImageUrl");

                    b.Property<string>("iOSAppStoreUrl");

                    b.HasKey("Id");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("Trifold.Models.BeerCsvRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABV");

                    b.Property<string>("Beer");

                    b.Property<string>("Brewery");

                    b.Property<string>("City");

                    b.Property<int>("CsvUploadId");

                    b.Property<string>("Description");

                    b.Property<string>("Error");

                    b.Property<string>("IBU");

                    b.Property<int>("Processed");

                    b.Property<string>("Style");

                    b.Property<string>("UntappdId");

                    b.HasKey("Id");

                    b.HasIndex("CsvUploadId");

                    b.ToTable("BeerCsvRecords");
                });

            modelBuilder.Entity("Trifold.Models.Beers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Abv");

                    b.Property<string>("BeerName")
                        .IsRequired();

                    b.Property<string>("BreweryCity");

                    b.Property<string>("BreweryName")
                        .IsRequired();

                    b.Property<string>("BreweryUrl");

                    b.Property<string>("Description");

                    b.Property<int>("EventId");

                    b.Property<int>("Ibu");

                    b.Property<string>("LabelUrl");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Style")
                        .IsRequired();

                    b.Property<int>("UntappdBeerId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("Beers");
                });

            modelBuilder.Entity("Trifold.Models.CsvFileUploads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<string>("FileName");

                    b.Property<int>("Progress");

                    b.Property<DateTime>("UploadDate");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("CsvFileUploads");
                });

            modelBuilder.Entity("Trifold.Models.EventPromoters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("AppId");

                    b.Property<string>("City");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactName");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Website");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.ToTable("EventPromoters");
                });

            modelBuilder.Entity("Trifold.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddToProst");

                    b.Property<string>("EventAddress");

                    b.Property<string>("EventCity");

                    b.Property<DateTime>("EventEndTime");

                    b.Property<string>("EventImageUrl");

                    b.Property<string>("EventName");

                    b.Property<string>("EventPrimaryColor");

                    b.Property<int>("EventPromoterId");

                    b.Property<DateTime>("EventStartTime");

                    b.Property<string>("EventState");

                    b.Property<string>("EventUrl");

                    b.Property<string>("EventZip");

                    b.Property<string>("FoursquareId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDirty");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("PromotionalUrl");

                    b.Property<string>("ShortPromoUrl");

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("EventPromoterId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Trifold.Models.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("Latitude");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<int>("Longitude");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Trifold.Models.Maps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("Height");

                    b.Property<string>("MapPath");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Trifold.Models.MobileTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("DeviceId");

                    b.Property<int>("EventId");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("MobileTokens");
                });

            modelBuilder.Entity("Trifold.Models.Modules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Trifold.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Trifold.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Trifold.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Trifold.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.ApplicationUser", b =>
                {
                    b.HasOne("Trifold.Models.EventPromoters", "EventPromoter")
                        .WithMany()
                        .HasForeignKey("EventPromoterId");
                });

            modelBuilder.Entity("Trifold.Models.BeerCsvRecords", b =>
                {
                    b.HasOne("Trifold.Models.CsvFileUploads", "CsvFileUploads")
                        .WithMany()
                        .HasForeignKey("CsvUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.Beers", b =>
                {
                    b.HasOne("Trifold.Models.Events", "Event")
                        .WithMany("Beers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Trifold.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Trifold.Models.CsvFileUploads", b =>
                {
                    b.HasOne("Trifold.Models.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.EventPromoters", b =>
                {
                    b.HasOne("Trifold.Models.Apps", "App")
                        .WithMany("EventPromoters")
                        .HasForeignKey("AppId");
                });

            modelBuilder.Entity("Trifold.Models.Events", b =>
                {
                    b.HasOne("Trifold.Models.EventPromoters", "EventPromoter")
                        .WithMany("Events")
                        .HasForeignKey("EventPromoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.Locations", b =>
                {
                    b.HasOne("Trifold.Models.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.Maps", b =>
                {
                    b.HasOne("Trifold.Models.Events", "Event")
                        .WithOne("Map")
                        .HasForeignKey("Trifold.Models.Maps", "EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trifold.Models.Modules", b =>
                {
                    b.HasOne("Trifold.Models.Events", "Event")
                        .WithMany("Modules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
